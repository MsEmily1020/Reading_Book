package app;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileNameExtensionFilter;

public class SignUpFrame extends CommonFrame {
	File selectImg;

	public SignUpFrame() {
		super(500, 500, "회원가입");
		var panel = new JPanel(null);
		panel.setBorder(new TitledBorder(new LineBorder(Color.black), "회원가입"));

		add(this.setBounds(panel, 20, 20, 450, 400));

		var labelList = "이름,아이디,비밀번호,생년월일,이메일,성별,최종학력,주소".split(",");
		var tfList = new JTextField[6];
		var cbList = new JComboBox[3];
		var rdoList = new JRadioButton[2];

		for(int i = 0; i < labelList.length; i++) {
			panel.add(this.setBounds(new JLabel(labelList[i]), 10, 40 + 40 * i, 80, 20));

			if(i <= 3) {
				tfList[i] = new JTextField();

				panel.add(this.setBounds(tfList[i], 80, 40 + 40 * i, 140, 24));
			}

			else if(i == 4) {
				tfList[i] = new JTextField();
				panel.add(this.setBounds(tfList[i], 80, 40 + 40 * i, 80, 24));
				panel.add(this.setBounds(new JLabel("@"), 160, 40 + 40 * i, 80, 20));

				cbList[0] = new JComboBox("naver.com,outlook.com,daum.com,gmail.com,nate.com,kebi.com,yahoo.com,korea.com,empal.com,hanmail.net".split(","));
				panel.add(this.setBounds(cbList[0], 180, 40 + 40 * i, 120, 24));
			}

			else if(i == 5) {
				rdoList[0] = new JRadioButton("남");
				rdoList[1] = new JRadioButton("여");

				var group = new ButtonGroup();

				group.add(rdoList[0]);
				group.add(rdoList[1]);

				rdoList[0].setSelected(true);

				panel.add(this.setBounds(rdoList[0], 80, 40 + 40 * i, 44, 24));
				panel.add(this.setBounds(rdoList[1], 120, 40 + 40 * i, 44, 24));
			}

			else if(i == 6) {
				panel.add(this.setBounds(cbList[1] = new JComboBox(" ,대학교 졸업,고등학교 졸업,중학교 졸업".split(",")), 80, 40 + 40 * i, 120, 24));
			}

			else {
				panel.add(this.setBounds(cbList[2] = new JComboBox(" ,서울,부산,대구,인천,광주,대전,울산,세종,경기,강원,충북,충남,전북,전남,경북,경남,제주".split(",")), 80, 40 + 40 * i, 70, 24));
				panel.add(this.setBounds(tfList[5] = new JTextField(), 160, 40 + 40 * i, 140, 24));

				tfList[5].setEditable(false);
			}
		}

		var lbImg = new JLabel();

		lbImg.setBorder(new LineBorder(Color.black));

		lbImg.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if(e.getClickCount() != 2) return;

				//double click
				var chooser = new JFileChooser();
				chooser.setFileFilter(new FileNameExtensionFilter("JPG Images", "jpg"));
				chooser.showOpenDialog(null);

				if(chooser.getSelectedFile() == null) return;

				selectImg = chooser.getSelectedFile();
				try {
					var img = ImageIO.read(selectImg);//파일 불러서
					lbImg.setIcon(new ImageIcon(img.getScaledInstance(lbImg.getWidth(),lbImg.getHeight(), Image.SCALE_SMOOTH /*4*/))); //추가하기
				} catch (Exception ex) {
					ex.printStackTrace(); //에러 추적을 위해 반드시 추가
				} //파일 읽기

			}
		});

		panel.add(setBounds(lbImg, 280, 30, 150, 150));

		var btSubmit = new JButton("가입");

		cbList[2].addActionListener(e ->{
			tfList[5].setText(""); //반드시 초기화
			if(cbList[2].getSelectedIndex() == 0) {
				tfList[5].setEditable(false); //빈칸 클릭
				return; //현재 실행 함수 종료(else랑 같은 역할)
			}

			//주소를 클릭한 부분
			tfList[5].setEditable(true);
			tfList[5].grabFocus();
		});

		btSubmit.addActionListener(e -> {
			//JDK8 람다 표현식 ->, Stream API(함수형 프로그래밍 패러다임)
			if(selectImg == null || 
					Arrays.stream(tfList).anyMatch(tf -> tf.getText().length() == 0) ||
					Arrays.stream(cbList).anyMatch(tf -> tf.getSelectedItem().equals(""))) { 
				errorMsg("빈칸이 존재합니다.");
				return;
			}

			try(var rs = getResulSet("SELECT * FROM user WHERE u_id = ?",tfList[1].getText())){
				if(rs.next()) {
					errorMsg("이미 존재하는 아이디");
					return;
				}
			} catch (SQLException e1) {
				e1.printStackTrace();
			}

			//정규표현식 패턴(규칙)을 이용하여 문자열이 그 규칙에 부합하는지 검사
			//숫자, 알파벳, 특수문자(!@#$ 하나는 포함) 하나 이상이 포함되어야 한다.\
			//.*[0-9].*
			//.*[a-z].* 또는 /.*[A-Z].*
			//.*[!@#$].*

			if(tfList[2].getText().length() < 4 ||
					tfList[2].getText().matches(".*[0-9].*") == false|| //숫자
					tfList[2].getText().matches(".*[a-zA-Z].*") == false|| //알파벳
					tfList[2].getText().matches(".*[!@#$].*") == false) /*특수문자*/ {
				errorMsg("비밀번호 형식이 일치하지 않습니다.");
				return;
			}

			//생년월일
			var sdf = new SimpleDateFormat("yyyy-MM-dd");
			sdf.setLenient(false); //엄격한 검사 수행(느슨한 검사 false / 기본 : true -> 올림처리) ex 15월 33일
			try {
				var date = sdf.parse(tfList[3].getText());
				var now = new Date();

				//미래(compareTo 함수의 결과가 양수 크다 / 음수 작다 / 0이면 서로 같다
				if(date.compareTo(now) > 0) {
					throw new ParseException("", 0);
				}

			} catch (ParseException e1) {
				errorMsg("생년월일 형식이 맞지 않습니다.");
				return;
			} //날짜 입력

			//회원가입 가능
			try {
				updateSQL("INSER INTO user (u_name, u_id, u_pw, u_birth, u_email, u_gender, u_graduate, u_address, u_img) "
						+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
						tfList[0].getText(),
						tfList[1].getText(),
						tfList[2].getText(),
						tfList[3].getText(),
						tfList[4].getText(),
						rdoList[0].isSelected() ? 1 : 2,
						cbList[1].getSelectedIndex() - 1,
						cbList[2].getSelectedItem() + " " + tfList[5].getText(),
						new FileInputStream(selectImg));

				infoMsg("회원가입이 완료되었습니다.");
				
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		});

		add(setBounds(btSubmit, 380, 424, 80, 24));
	}

	public static void main(String[] args) {
		new SignUpFrame().setVisible(true);
	}
}